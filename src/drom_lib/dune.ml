(**************************************************************************)
(*                                                                        *)
(*    Copyright 2020 OCamlPro & Origin Labs                               *)
(*                                                                        *)
(*  All rights reserved. This file is distributed under the terms of the  *)
(*  GNU Lesser General Public License version 2.1, with the special       *)
(*  exception on linking described in the file LICENSE.                   *)
(*                                                                        *)
(**************************************************************************)

open EzCompat
open Types

(*
TODO: it's not clear how to correctly format dune files so that
they will not trigger a promotion with 'dune build @fmt'. The use
of sexplib0 does not immediately generate files in the correct format.
'dune' does not export a module for that in its library either.
We end up adding '(formatting (enabled_for ocaml reason))' to dune-project
to completely disable formatting of dune files.
*)

let package_dune_files package =
  let b = Buffer.create 1000 in
  let p_generators =
    match package.p_generators with
    | None -> []
    | Some generators -> generators
  in
  ( match Sys.readdir package.dir with
  | exception _ -> ()
  | files ->
    Array.iter
      (fun file ->
        if Filename.check_suffix file ".mll" then begin
          if
            List.mem "ocamllex" package.project.generators
            || List.mem "ocamllex" p_generators
          then
            Printf.bprintf b "(ocamllex %s)\n"
              (Filename.chop_suffix file ".mll")
        end else if Filename.check_suffix file ".mly" then
          if List.mem "ocamlyacc" p_generators then
            Printf.bprintf b "(ocamlyacc %s)\n"
              (Filename.chop_suffix file ".mly")
          else if List.mem "menhir" p_generators then
            Printf.bprintf b "(menhir (modules %s))\n"
              (Filename.chop_suffix file ".mly")
          else if List.mem "ocamlyacc" package.project.generators then
            Printf.bprintf b "(ocamlyacc %s)\n"
              (Filename.chop_suffix file ".mly")
          else if List.mem "menhir" package.project.generators then
            Printf.bprintf b "(menhir (modules %s))\n"
              (Filename.chop_suffix file ".mly")
          else
            Printf.eprintf "no generator for %s\n%!" file)
      files );
  Buffer.contents b

let template_dune_project p =
  let b = Buffer.create 100000 in
  Printf.bprintf b
    {|(lang dune 2.0)
; This file was generated by drom, using drom.toml
(name %s)
(allow_approximate_merlin)
(generate_opam_files false)
(version %s)
(formatting (enabled_for ocaml reason))
|}
    p.package.name p.version;

  let add_package package =
    Printf.bprintf b {|
(package
 (name %s)
 (synopsis %S)
 (description %S)
|}
      package.name (Misc.p_synopsis package)
      (Misc.p_description package);

    Printf.bprintf b " (depends\n";
    Printf.bprintf b "   (ocaml (>= %s))\n" package.project.min_edition;
    let depend_of_dep name d =
      match d.depversions with
      | [] -> Printf.bprintf b "   %s\n" name
      | _ ->
        Printf.bprintf b "   (%s " name;
        let rec iter versions =
          match versions with
          | [] -> ()
          | [ version ] -> (
            match version with
            | Version -> Printf.bprintf b "(= version)"
            | NoVersion -> ()
            | Semantic (major, minor, fix) ->
              Printf.bprintf b "(and (>= %d.%d.%d) (< %d.0.0))" major minor fix
                (major + 1)
            | Lt version -> Printf.bprintf b "( < %s )" version
            | Le version -> Printf.bprintf b "( <= %s )" version
            | Eq version -> Printf.bprintf b "( = %s )" version
            | Ge version -> Printf.bprintf b "( >= %s )" version
            | Gt version -> Printf.bprintf b "( > %s )" version )
          | version :: tail ->
            Printf.bprintf b "(and ";
            iter [ version ];
            iter tail;
            Printf.bprintf b ")"
        in
        iter d.depversions;
        Printf.bprintf b ")\n"
    in
    List.iter
      (fun (name, d) -> depend_of_dep name d)
      (Misc.p_dependencies package);
    List.iter (fun (name, d) -> depend_of_dep name d) (Misc.p_tools package);
    Printf.bprintf b " ))\n"
  in

  List.iter add_package p.packages;
  Buffer.contents b

(*
let template_dune p =
  let b = Buffer.create 1000 in
  Printf.bprintf b "; This file was generated by drom, using drom.toml\n";
  Printf.bprintf b "(env\n";
  StringMap.iter
    (fun name profile ->
      Printf.bprintf b "  (%s\n" name;
      StringMap.iter
        (fun name value ->
          Printf.bprintf b "    (%s %s%s)\n"
            ( match name with
            | "ocaml" -> "flags (:standard"
            | "odoc" -> "odoc"
            | "coq" -> "coq ("
            | tool -> tool ^ "_flags" )
            value
            ( match name with
            | "coq" -> ")" (* (coq (flags XXX)) *)
            | "ocaml" -> ")"
            | _ -> "" ))
        profile.flags;
      Printf.bprintf b "  )\n")
    p.profiles;
  Printf.bprintf b ")\n";
  if p.skip_dirs <> [] then
    Printf.bprintf b "(data_only_dirs %s)\n" (String.concat " " p.skip_dirs);
  Buffer.contents b
*)
