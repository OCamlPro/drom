![skip:sphinx]
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# !{name} documentation build configuration file, created by
# sphinx-quickstart.
#
# This file is execfile()d with the current directory set to its
# containing dir.
#
# Note that not all possible configuration values are present in this
# autogenerated file.
#
# All configuration values have a default; values that are commented out
# serve to show the default.

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#
# sys.path.insert(0, os.path.abspath('.'))

import os
import sys
import datetime
import subprocess
from os import environ
sys.path.insert(0, os.path.abspath('.') + '/_extensions')

# -- General configuration ------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#
# needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
#extensions = ['sphinx.ext.extlinks']

# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# The suffix(es) of source filenames.
# You can specify multiple suffix as a list of string:
#
source_suffix = ['.rst', '.md']
# source_suffix = '.rst'

# The master toctree document.
master_doc = 'index'

# General information about the project.
project = '!{name}'
copyright = '!{sphinx-copyright}'
author = '!{authors-ampersand}'

# The version info for the project you're documenting, acts as replacement for
# |version| and |release|, also used in various other places throughout the
# built documents.
#
# The short X.Y version.

git = subprocess.check_output("git describe --always", shell=True).decode("utf-8")
branch= subprocess.check_output("git rev-parse --abbrev-ref HEAD", shell=True).decode("utf-8")
version = branch + " (" + git + ")"
# version = os.environ.get('CI_COMMIT_REF_NAME', 'v1.0')
# The full version, including alpha/beta/rc tags.
release = version + datetime.datetime.now().strftime(" (%Y/%m/%d %H:%M)")
# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = None

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This patterns also effect to html_static_path and html_extra_path
exclude_patterns = ['_build', 'Thumbs.db', '.DS_Store', 'doc_gen']

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'lovelace'

# Deactivate syntax highlighting
# - http://www.sphinx-doc.org/en/stable/markup/code.html#code-examples
# - http://www.sphinx-doc.org/en/stable/config.html#confval-highlight_language
highlight_language = 'ocaml'
# TODO write a Pygments lexer for Michelson
# cf. http://pygments.org/docs/lexerdevelopment/ and http://pygments.org/docs/lexers/


# If true, `todo` and `todoList` produce output, else they produce nothing.
todo_include_todos = False


# -- Options for HTML output ----------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
#
html_theme = "sphinx_rtd_theme"

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#
html_theme_options = {'logo_only': True}
# html_logo = "logo.svg"
# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ['_static']

# Custom sidebar templates, must be a dictionary that maps document names
# to template names.
#
# This is required for the alabaster theme
# refs: http://alabaster.readthedocs.io/en/latest/installation.html#sidebars
# html_sidebars = {
#     '**': [
#         'relations.html',  # needs 'show_related': True theme option to display
#         'searchbox.html',
#     ]
# }


# -- Options for HTMLHelp output ------------------------------------------

# Output file base name for HTML help builder.
htmlhelp_basename = 'Liqdoc'


# -- Options for LaTeX output ---------------------------------------------

latex_elements = {
    'inputenc':'',
    'utf8extra': '',
    'preamble': r'''
      \usepackage{fontspec}
      \IfFontExistsTF{Lato}{\setsansfont{Lato}}{\setsansfont{Arial}}
      \IfFontExistsTF{Linux Libertine O}{
        \setromanfont[Scale=1.1]{Linux Libertine O}
      }{\setromanfont{Times New Roman}}
      \IfFontExistsTF{DejaVu Sans Mono}{
        \setmonofont[Scale=MatchLowercase]{DejaVu Sans Mono}
      }{\setmonofont[Scale=MatchLowercase]{Courier}}
    ''',

    # The paper size ('letterpaper' or 'a4paper').
    #
    # 'papersize': 'letterpaper',

    # The font size ('10pt', '11pt' or '12pt').
    #
    # 'pointsize': '10pt',

    # Additional stuff for the LaTeX preamble.
    #
    # 'preamble': '',

    # Latex figure (float) alignment
    #
    # 'figure_align': 'htbp',
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title,
#  author, documentclass [howto, manual, or own class]).
latex_documents = [
    (master_doc, '!{name}.tex', '!{name} Documentation',
     'author', 'manual'),
]


# -- Options for manual page output ---------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    (master_doc, '!{name}', '!{name} Documentation',
     [author], 1)
]


# -- Options for Texinfo output -------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
    (master_doc, '!{name}', '!{name} Documentation',
     author, '!{name}', 'One line description of project.',
     'Miscellaneous'),
]

# -- Ignore fragments in linkcheck

linkcheck_anchors = False


# -- Options for Epub output -------------------------------------------------

# Bibliographic Dublin Core info.
epub_title = project
epub_author = author
epub_publisher = author
epub_copyright = copyright

# The unique identifier of the text. This can be a ISBN number
# or the project homepage.
#
# epub_identifier = ''

# A unique identification for the text.
#
# epub_uid = ''

# A list of files that should not be packed into the epub file.
epub_exclude_files = ['search.html']

# entry point for setup
def setup(app):
    app.add_stylesheet('css/fixes.css')
