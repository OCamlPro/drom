[project]
create-project = false
drom-version = "0.9.2"
share-repo = "https://github.com/OCamlPro/drom-share"

[project]
authors = ["Fabrice Le Fessant <fabrice.le_fessant@ocamlpro.com>", "Léo Andrès <leo.andres@ocamlpro.com>"]
ci-systems = ["ubuntu-latest", "macos-latest", "windows-latest"]
copyright = "OCamlPro SAS"
edition = "4.14.1"
github-organization = "ocamlpro"
license = "LGPL2"
min-edition = "4.08.0"
name = "drom"
skeleton = "program"
synopsis = "The drom tool is a wrapper over opam/dune in an attempt to provide a cargo-like user experience"
version = "0.9.2"

# keys that you could also define:
# odoc-target = "...odoc-target..."
# sphinx-target = "...sphinx-target..."
# archive = "...archive..."
# dev-repo = "...dev-repo..."
# bug-reports = "...bug-reports..."
# doc-api = "...doc-api..."
# doc-gen = "...doc-gen..."
# homepage = "...homepage..."

[project]
description = """
The drom tool is a wrapper over opam/dune in an attempt to provide a cargo-like
user experience. It can be used to create full OCaml projects with
sphinx and odoc documentation. It has specific knowledge of Github and
will generate files for Github Actions CI and Github pages.
"""

[project]
skip = ["sphinx/about.rst", "src/drom_lib/main.ml", "sphinx/index.rst", "CHANGES.md", "test/expect-tests/test.ml", "ocamlformat", "sphinx/install.rst", "src/ez_opam_file/dune"]

# project-wide library dependencies (not for package-specific deps)
[dependencies]

# project-wide tools dependencies (not for package-specific deps)
[tools]
dune = ">=2.8"
[tools.ocamlformat]
for-test = true
[tools.odoc]
for-doc = true
[tools.ppx_expect]
for-test = true
[tools.ppx_inline_test]
for-test = true

[project]

# dirs to skip while scanning for dune files
skip-dirs = ["drom-test"]

# dirs to scan for share/ folders (with package names)
share-dirs = []

# build profile to use by default
# build-profile = ...

# Profile options for this project
#    [profile]
#    dev = { ocaml-flags = "-w +a-4-40-41-42-44" }
#    release = { ocaml-flags = "-w -a" }
[profile.dev]
ocaml-flags = "-w +a-4-40-41-42-44-70"
[profile.release]
ocaml-flags = "-w -a"

# project-wide fields (depends on project skeleton)
# examples:
#  docker-alpine-image = "ocamlpro/ocaml:4.13"
#  dune-lang = "2.1"
#  readme-trailer = "..."
#  dot-gitignore-trailer = "..."
[fields]
dune-lang = "2.1"
readme-trailer = """

## Simple Example

You can create a new OCaml project with:

```
$ drom new my-client --skeleton mini_prg
Creating project "my-client" with skeleton "mini_prg", license "LGPL2"
  and sources in src/my-client:
Creating directory my-client
Using skeleton "program" for package "my-client"
[master (root-commit) 8d83262] Initial commit

└── my-client/
    ├── .drom             (drom state, do not edit)
    ├── .github/
    │   └── workflows/
    │       └── workflow.yml
    ├── .gitignore
    ├── CHANGES.md
    ├── LICENSE.md
    ├── Makefile
    ├── README.md
    ├── drom.toml    <────────── project config EDIT !
    ├── dune
    ├── dune-project
    ├── opam/
    │   └── my-client.opam
    ├── scripts/
    │   ├── after.sh
    │   ├── before.sh
    │   └── copy-bin.sh
    └── src/
        └── my-client/
            ├── dune
            ├── main.ml
            ├── package.toml    <────────── package config EDIT !
            └── version.mlt
```

This project uses the minimalist `mini_prg` skeleton, but other skeletons
like `program` or `library` have more files.

"""

[[package]]
dir = "src/drom"
# edit 'src/drom/package.toml' for package-specific options

[[package]]
dir = "src/drom_lib"
# edit 'src/drom_lib/package.toml' for package-specific options

[[package]]
dir = "src/toml.7.1.0"
# edit 'src/toml.7.1.0/package.toml' for package-specific options

